# - *- coding: utf- 8 - *-

import logging
from telegram import KeyboardButton
from telegram import ReplyKeyboardMarkup
from telegram.ext import Updater
from telegram.ext import CommandHandler, MessageHandler, Filters
from telegram.ext import ShippingQueryHandler
import re
import time
import datetime
from datetime import datetime, timedelta, timezone
from dateutil import tz

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

users_id = []

utc = tz.tzutc()


def start(update, context):
    btn = [[KeyboardButton('/help'), KeyboardButton('/todo_list')]]
    msg = '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–µ –∑–∞–±—ã—Ç—å –æ —Ç–≤–æ–∏—Ö –ø–ª–∞–Ω–∞—Ö. ‚è∞ \n\n' \
          '–ò—Å–ø–æ–ª—å–∑—É–π /set <—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú> —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n' \
          '–Ø –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è.üîñ\n' \
          '–ò—Å–ø–æ–ª—å–∑—É–π /todo_list —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏. üìù\n\n' \
          '–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—Ç—Å—è –ø–∏—Å–∞—Ç—å, –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.\n\n' \
          '–ò—Å–ø–æ–ª—å–∑—É–π /help –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.'
    markup = ReplyKeyboardMarkup(btn, one_time_keyboard=True, resize_keyboard=True)
    update.message.reply_text(msg, reply_markup=markup)
    if update.message.chat_id not in users_id:
        users_id.append(update.message.chat_id)


def alarm(context):
    job = context.job
    context.bot.send_message(job.context, job.name)


def set_timer(update, context):
    task_time = ''
    task_date = ''

    for i in context.args:
        if re.search(r'(\d\d)(:)(\d\d)', i):
            task_time = i
        elif re.search(r'(\d\d)(\.)(\d\d)', i) or re.search(r'(\d\d)(\.)(\d\d)(\.)(\d\d\d\d)', i):
            task_date = i

    if task_time == True and task_date == False and re.search(r'(–ó|–∑–∞–≤—Ç—Ä–∞)', update.message.text[5:]) == False:
        task_time = task_time.split(':')
        time_now = datetime.now()
        due = datetime(time_now.year, time_now.month, time_now.day, int(task_time[0]),
                       int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)
        new_timer = context.job_queue.run_once(alarm, due, context=update.message.chat_id, name=update.message.text[5:])
        context.chat_data[str(update.message.text[5:])] = new_timer
        update.message.reply_text("–ó–∞–ø–∏—Å—å –≤–Ω–µ—Å–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª")

    elif task_time and task_date:
        task_time = task_time.split(':')
        task_date = task_date.split('.')
        time_now = datetime.now()
        if len(task_date) == 3:
            due = datetime(int(task_date[2]), int(task_date[1]), int(task_date[0]), int(task_time[0]),
                           int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)
            new_timer = context.job_queue.run_once(alarm, due, context=update.message.chat_id,
                                                   name=update.message.text[5:])
        else:
            due = datetime(time_now.year, int(task_date[1]), int(task_date[0]), int(task_time[0]),
                           int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)
            new_timer = context.job_queue.run_once(alarm, due, context=update.message.chat_id,
                                                   name=update.message.text[5:])
        context.chat_data[str(update.message.text[5:])] = new_timer
        update.message.reply_text("–ó–∞–ø–∏—Å—å –≤–Ω–µ—Å–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª")

    elif re.search(r'(–ó|–∑–∞–≤—Ç—Ä–∞)', update.message.text[5:]) and task_time:
        task_time = task_time.split(':')
        time_now = datetime.now()
        try:
            due = datetime(time_now.year, time_now.month, time_now.day + 1, int(task_time[0]),
                           int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)
            new_timer = context.job_queue.run_once(alarm, due, context=update.message.chat_id,
                                                   name=update.message.text[5:])
        except:
            due = datetime(time_now.year, time_now.month + 1, 1, int(task_time[0]),
                           int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)
            new_timer = context.job_queue.run_once(alarm, due, context=update.message.chat_id,
                                                   name=update.message.text[5:])
        context.chat_data[str(update.message.text[5:])] = new_timer
        update.message.reply_text("–ó–∞–ø–∏—Å—å –≤–Ω–µ—Å–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª")

    else:
        update.message.reply_text("–ù–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")


def unset(update, context):
    try:
        number = int(context.args[0]) - 1
        todo_list = [i for i in context.chat_data]
        timer = context.chat_data[todo_list[number]]
        timer.schedule_removal()
        del context.chat_data[todo_list[number]]
        update.message.reply_text("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
    except(IndexError, ValueError):
        update.message.reply_text("–ù—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å: /unset <–Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ>")


def todo_list_view(update, context):
    time_now = datetime.now()
    deleted_tasks = []
    todo_list_msg = ''
    number = 1

    if context.chat_data:
        for i in context.chat_data:
            todo_time = context.chat_data[i]['date']

            if todo_time > time_now.astimezone(utc):  # —É–¥–∞–ª–∏—Ç—å —Å–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                todo_list_msg += f'{number}. {i.capitalize()}\n'
                number += 1
            else:
                deleted_tasks.append(i)

        if todo_list_msg:
            update.message.reply_text(text=f'{todo_list_msg}\n'
                                           'üóë –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞–ø–∏—à–∏ /unset <–Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ>')
        else:
            update.message.reply_text(text='–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á')
    else:
        update.message.reply_text(text='–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á')

    for i in deleted_tasks:
        del context.chat_data[i]


def broadcast_message(update, context):
    if update.message.chat_id == 195177538:
        message_text = update.message.text[11:]
        for i in users_id:
            context.bot.send_message(i, message_text)


def save_users_list(update, context):
    print(users_id)
    pass


def help():
    pass


def msg_set(update, context):
    time_now = datetime.now()
    task_time = re.search(r'(\d\d)(:)(\d\d)', update.message.text)
    task_date = re.search(r'(\d\d)(\.)(\d\d)(\.)(\d\d)', update.message.text)

    if task_time and not re.search(r'(–ó|–∑–∞–≤—Ç—Ä–∞)', update.message.text) and not task_date:
        task_time = task_time.group(0).split(':')
        due = datetime(time_now.year, time_now.month, time_now.day, int(task_time[0]),
                       int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)

        if due > time_now.astimezone(utc):
            new_timer = context.job_queue.run_once(alarm, due, context=update.message.chat_id, name=update.message.text)
            context.chat_data[str(update.message.text)] = {'date': due, 'msg': new_timer}
            update.message.reply_text("–ó–∞–ø–∏—Å—å –≤–Ω–µ—Å–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª")
        else:
            update.message.reply_text("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –≤ –ø—Ä–æ—à–ª–æ–º...")

    elif task_time and task_date and not re.search(r'(–ó|–∑–∞–≤—Ç—Ä–∞)', update.message.text):
        task_time = task_time.group(0).split(':')
        task_date = task_date.group(0).split('.')

        if len(task_date) == 3 and len(task_date[2]) == 4:
            due = datetime(int(task_date[2]), int(task_date[1]), int(task_date[0]), int(task_time[0]),
                           int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)
        elif len(task_date) == 3 and len(task_date[2]) == 2:
            due = datetime(int(task_date[2]) + 2000, int(task_date[1]), int(task_date[0]), int(task_time[0]),
                           int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)
        else:
            due = datetime(time_now.year, int(task_date[1]), int(task_date[0]), int(task_time[0]),
                           int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)

        if due > time_now.astimezone(utc):
            new_timer = context.job_queue.run_once(alarm, due, context=update.message.chat_id, name=update.message.text)
            context.chat_data[str(update.message.text)] = {'date': due, 'msg': new_timer}
            update.message.reply_text("–ó–∞–ø–∏—Å—å –≤–Ω–µ—Å–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª")
        else:
            update.message.reply_text("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –≤ –ø—Ä–æ—à–ª–æ–º...")

    elif re.search(r'(–ó|–∑–∞–≤—Ç—Ä–∞)', update.message.text) and task_time:
        task_time = task_time.group(0).split(':')

        try:
            due = datetime(time_now.year, time_now.month, time_now.day + 1, int(task_time[0]),
                           int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)
        except:
            due = datetime(time_now.year, time_now.month + 1, 1, int(task_time[0]),
                           int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)

        if due > time_now.astimezone(utc):
            new_timer = context.job_queue.run_once(alarm, due, context=update.message.chat_id, name=update.message.text)
            context.chat_data[str(update.message.text)] = {'date': due, 'msg': new_timer}
            update.message.reply_text("–ó–∞–ø–∏—Å—å –≤–Ω–µ—Å–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª")
        else:
            update.message.reply_text("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –≤ –ø—Ä–æ—à–ª–æ–º...")

    else:
        update.message.reply_text("–ù–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è. –ù–µ–æ–±–æ–¥–∏–º–æ –ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")


def error(update, context):
    logger.warning('Update "%s" caused error "%s"', update, context.error)


def main():
    updater = Updater('1155995478:AAHhthsw8Jm2odjX55UvJ6Y95_GX7S3iOks', use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", start))
    dp.add_handler(MessageHandler(Filters.regex('(\d\d)(:)(\d\d)'), msg_set, pass_job_queue=True, pass_chat_data=True))
    dp.add_handler(CommandHandler("set", set_timer, pass_args=True, pass_job_queue=True, pass_chat_data=True))
    dp.add_handler(CommandHandler("unset", unset, pass_chat_data=True))
    dp.add_handler(CommandHandler("todo_list", todo_list_view, pass_chat_data=True))
    dp.add_handler(CommandHandler("1984_admin", broadcast_message))
    dp.add_handler(CommandHandler("1984_admin_save", save_users_list))
    dp.add_error_handler(error)

    updater.start_polling()

    updater.idle()


if __name__ == '__main__':
    main()
