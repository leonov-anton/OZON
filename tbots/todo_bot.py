# - *- coding: utf- 8 - *-

import logging
import re
import datetime
from telegram import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, ConversationHandler
from datetime import datetime, timedelta, timezone
from dateutil import tz
import pytz
from timezonefinder import TimezoneFinder

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

# global variables
users_id = []
utc = tz.tzutc()



def start(update, context):
    btn = [[KeyboardButton('/help'), KeyboardButton('/todo_list')]]
    msg = '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–µ –∑–∞–±—ã—Ç—å –æ —Ç–≤–æ–∏—Ö –ø–ª–∞–Ω–∞—Ö. ‚è∞ \n\n' \
          '–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n' \
          '–ò–ª–∏ —É–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–µ—Ç–∞ –î–î.–ú–ú.–ì–ì –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ "–∑–∞–≤—Ç—Ä–∞" —Ç–∞–∫ –∂–µ —É–∫–∞–∑–∞–≤ –≤—Ä–µ–º—è. \n' \
          '–Ø –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.üîñ\n' \
          '–ù–∞–ø–∏—Å–∞–≤ /todo_list –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏. üìù\n' \
          '–ù–∞–ø–∏—à–∏ /help –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.\n\n' \
          '–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—Ç—Å—è –ø–∏—Å–∞—Ç—å, –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.'
    markup = ReplyKeyboardMarkup(btn, one_time_keyboard=True, resize_keyboard=True)
    update.message.reply_text(msg, reply_markup=markup)

    if update.message.chat_id not in users_id:
        users_id.append(update.message.chat_id)


def alarm(context):
    job = context.job
    context.bot.send_message(job.context, job.name)


def set_timer(update, context):
    task_time = ''
    task_date = ''

    for i in context.args:
        if re.search(r'(\d\d)(:)(\d\d)', i):
            task_time = i
        elif re.search(r'(\d\d)(\.)(\d\d)', i) or re.search(r'(\d\d)(\.)(\d\d)(\.)(\d\d\d\d)', i):
            task_date = i

    if task_time == True and task_date == False and re.search(r'(–ó|–∑–∞–≤—Ç—Ä–∞)', update.message.text[5:]) == False:
        task_time = task_time.split(':')
        time_now = datetime.now()
        due = datetime(time_now.year, time_now.month, time_now.day, int(task_time[0]),
                       int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)
        new_timer = context.job_queue.run_once(alarm, due, context=update.message.chat_id, name=update.message.text[5:])
        context.chat_data[str(update.message.text[5:])] = new_timer
        update.message.reply_text("–ó–∞–ø–∏—Å—å –≤–Ω–µ—Å–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª")

    elif task_time and task_date:
        task_time = task_time.split(':')
        task_date = task_date.split('.')
        time_now = datetime.now()
        if len(task_date) == 3:
            due = datetime(int(task_date[2]), int(task_date[1]), int(task_date[0]), int(task_time[0]),
                           int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)
            new_timer = context.job_queue.run_once(alarm, due, context=update.message.chat_id,
                                                   name=update.message.text[5:])
        else:
            due = datetime(time_now.year, int(task_date[1]), int(task_date[0]), int(task_time[0]),
                           int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)
            new_timer = context.job_queue.run_once(alarm, due, context=update.message.chat_id,
                                                   name=update.message.text[5:])
        context.chat_data[str(update.message.text[5:])] = new_timer
        update.message.reply_text("–ó–∞–ø–∏—Å—å –≤–Ω–µ—Å–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª")

    elif re.search(r'(–ó|–∑–∞–≤—Ç—Ä–∞)', update.message.text[5:]) and task_time:
        task_time = task_time.split(':')
        time_now = datetime.now()
        try:
            due = datetime(time_now.year, time_now.month, time_now.day + 1, int(task_time[0]),
                           int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)
            new_timer = context.job_queue.run_once(alarm, due, context=update.message.chat_id,
                                                   name=update.message.text[5:])
        except:
            due = datetime(time_now.year, time_now.month + 1, 1, int(task_time[0]),
                           int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)
            new_timer = context.job_queue.run_once(alarm, due, context=update.message.chat_id,
                                                   name=update.message.text[5:])
        context.chat_data[str(update.message.text[5:])] = new_timer
        update.message.reply_text("–ó–∞–ø–∏—Å—å –≤–Ω–µ—Å–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª")

    else:
        update.message.reply_text("–ù–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")


def unset(update, context):
    try:
        number = int(context.args[0]) - 1
        todo_list = [i for i in context.chat_data]
        timer = context.chat_data[todo_list[number]]['job']
        timer.schedule_removal()
        del context.chat_data[todo_list[number]]
        update.message.reply_text("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
    except(IndexError, ValueError):
        update.message.reply_text("–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–∏—Å–∞—Ç—å: /unset <–Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ>, –Ω–∞–ø—Ä–∏–º–µ—Ä: /unset 1")


def todo_list_view(update, context):
    time_now = datetime.now()

    deleted_tasks = [i for i in context.chat_data if context.chat_data[i]['date'] < time_now.astimezone(utc)]
    for i in deleted_tasks:
        del context.chat_data[i]

    if context.chat_data:
        todo_list_msg = ''
        number = 1

        for i in context.chat_data:
            todo_list_msg += f'{number}. {i.capitalize()}\n'
            number += 1

        if todo_list_msg:
            # update.message.reply_text(text=f'{todo_list_msg}\n'
            # 'üóë –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞–ø–∏—à–∏ /unset <–Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ>')
            keyboard = [[InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data='1')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            update.message.reply_text(text=f'{todo_list_msg}\n'
                                           'üóë –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞–ø–∏—à–∏ /unset <–Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ>',
                                      reply_markup=reply_markup)

    else:
        update.message.reply_text(text='–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á')

    return CHOOSING


def broadcast_message(update, context):
    if update.message.chat_id == 195177538:
        message_text = update.message.text[11:]
        for i in users_id:
            context.bot.send_message(i, message_text)


def save_users_list(update, context):
    update.message.reply_text(users_id)
    pass


def help():
    pass


def message_set(update, context):
    if update.message.chat_id not in users_id:
        users_id.append(update.message.chat_id)

    local_tz = tz.tzoffset('+3', 10800)
    time_now = datetime.now().astimezone(local_tz)
    task_time = re.search(r'(\d{1,2})(:)(\d{1,2})', update.message.text)
    task_date = re.search(r'(\d{1,2}\.\d{1,2})(\.\d{,4})?', update.message.text)

    if task_time and not re.search(r'(–ó|–∑–∞–≤—Ç—Ä–∞)', update.message.text) and not task_date:
        task_time = task_time.group(0).split(':')
        task_time = datetime(time_now.year, time_now.month, time_now.day, int(task_time[0]),
                             int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)
        if task_time > time_now.astimezone(utc):
            new_timer = context.job_queue.run_once(alarm, task_time, context=update.message.chat_id,
                                                   name=update.message.text)
            context.chat_data[str(update.message.text)] = {'date': task_time, 'job': new_timer}
            update.message.reply_text("–ó–∞–ø–∏—Å—å –≤–Ω–µ—Å–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª")
        else:
            update.message.reply_text("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –≤ –ø—Ä–æ—à–ª–æ–º...")

    elif task_time and task_date and not re.search(r'(–ó|–∑–∞–≤—Ç—Ä–∞)', update.message.text):
        task_time = task_time.group(0).split(':')
        task_date = task_date.group(0).split('.')
        if len(task_date) == 3 and len(task_date[2]) == 4:
            task_time = datetime(int(task_date[2]), int(task_date[1]), int(task_date[0]), int(task_time[0]),
                                 int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)
        elif len(task_date) == 3 and len(task_date[2]) == 2:
            task_time = datetime(int(task_date[2]) + 2000, int(task_date[1]), int(task_date[0]), int(task_time[0]),
                                 int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)
        else:
            task_time = datetime(time_now.year, int(task_date[1]), int(task_date[0]), int(task_time[0]),
                                 int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)
        print(task_time)
        if task_time > time_now.astimezone(utc):
            new_timer = context.job_queue.run_once(alarm, task_time, context=update.message.chat_id,
                                                   name=update.message.text)
            context.chat_data[str(update.message.text)] = {'date': task_time, 'job': new_timer}
            update.message.reply_text("–ó–∞–ø–∏—Å—å –≤–Ω–µ—Å–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª")
        else:
            update.message.reply_text("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –≤ –ø—Ä–æ—à–ª–æ–º...")

    elif re.search(r'(–ó|–∑–∞–≤—Ç—Ä–∞)', update.message.text) and task_time:
        task_time = task_time.group(0).split(':')

        try:
            task_time = datetime(time_now.year, time_now.month, time_now.day + 1, int(task_time[0]),
                                 int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)
        except:
            task_time = datetime(time_now.year, time_now.month + 1, 1, int(task_time[0]),
                                 int(task_time[1]), tzinfo=timezone(timedelta(hours=+3))).astimezone(utc)

        if task_time > time_now.astimezone(utc):
            new_timer = context.job_queue.run_once(alarm, task_time, context=update.message.chat_id,
                                                   name=update.message.text)
            context.chat_data[str(update.message.text)] = {'date': task_time, 'job': new_timer}
            update.message.reply_text("–ó–∞–ø–∏—Å—å –≤–Ω–µ—Å–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª")

    deleted_tasks = [i for i in context.chat_data if context.chat_data[i]['date'] < time_now.astimezone(utc)]
    for i in deleted_tasks:
        del context.chat_data[i]


def message_null(update, context):
    update.message.reply_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–∞—Ç–µ –ß–ß:–ú–ú, –¥–∞—Ç–∞ –ø–æ –∂–µ–ª–∞–Ω–∏—é")


def error(update, context):
    logger.warning('Update "%s" caused error "%s"', update, context.error)


# def test(update, context):
#     query = update.callback_query
#     if query.answer():
#         query.edit_message_text(text="–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
#
#     return TYPING_CHOICE


# def unset2(update, context):
#     update.message.reply_text("—Ä–∞–±–æ—Ç–∞–µ—Ç")
#     deleted_list = re.findall('(\d{1,2})', update.message.text)
#
#     for i in deleted_list:
#         number = int(i) - 1
#         todo_list = [i for i in context.chat_data]
#         timer = context.chat_data[todo_list[number]]['job']
#         timer.schedule_removal()
#         del context.chat_data[todo_list[number]]
#
#     update.message.reply_text("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")

    # print(query.answer())


def location(update, context):
    tf = TimezoneFinder()
    longitude = update.message.location['longitude']
    latitude = update.message.location['latitude']
    local_tz = datetime.now(pytz.timezone(tf.certain_timezone_at(lng=longitude, lat=latitude))).strftime('%Z%z')
    tzzz_hours = int(local_tz[-5:]) // 100
    tzzz_minutes = int(local_tz[-5:]) % 100
    context.chat_data['local_tz'] = {'hours': tzzz_hours, 'minutes': tzzz_minutes}
    update.message.reply_text("–õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")


def main():
    updater = Updater('1155995478:AAHhthsw8Jm2odjX55UvJ6Y95_GX7S3iOks', use_context=True)

    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", start))
    dp.add_handler(MessageHandler(Filters.regex(r'(\d{1,2})(:)(\d{1,2})') & ~Filters.location & ~Filters.command, message_set, pass_job_queue=True, pass_chat_data=True))
    # dp.add_handler(MessageHandler(Filters.all & ~(Filters.regex(r'(\d{1,2})(:)(\d{1,2})') & ~Filters.location & ~Filters.command), message_null))
    dp.add_handler(CommandHandler("set", set_timer, pass_args=True, pass_job_queue=True,
                                  pass_chat_data=True))
    dp.add_handler(CommandHandler("unset", unset, pass_chat_data=True))
    dp.add_handler(CommandHandler("todo_list", todo_list_view, pass_chat_data=True))
    dp.add_handler(MessageHandler(Filters.location, location, pass_job_queue=True, pass_chat_data=True))
    dp.add_handler(CommandHandler("1984_admin", broadcast_message))
    dp.add_handler(CommandHandler("1984_admin_save", save_users_list))
    dp.add_handler(MessageHandler(Filters.location, location, pass_job_queue=True, pass_chat_data=True))

    # dp.add_handler(CommandHandler("test", test))
    dp.add_error_handler(error)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
